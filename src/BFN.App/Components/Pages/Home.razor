@page "/"
@using BFN.App.Components.Layout
@layout HomeLayout
@using BFN.App.Services
@using BFN.Data.Models
@using BFN.Data.Models.DTOs
@inject DataService dataService
@inject NavigationManager NavigationManager

<div class="navbar navbar-dark bg-dark justify-content-between px-2">
    <button @onclick="GoToPreviousDay" class="btn btn-dark fs-1">&lt;</button>
    <button @onclick="SetDateToToday" class="btn btn-dark">
        @DisplayDateText
    </button>
    <button @onclick="GoToNextDay" class="btn btn-dark fs-1">></button>
</div>

@if (logs.Any())
{
    var groupedLogs = logs.GroupBy(log => log.ExerciseId).ToList();

    foreach (var group in groupedLogs)
    {
        <div class="card m-3" @onclick="() => NavigateToExercise(group.Key)">
            <div class="card-body">
                <h3 class="card-title">@group.First().ExerciseName</h3>
                <hr />
                <table class="table table-borderless mb-0">
                    <tbody>
                        @for (int i = 0; i < group.Count(); i++)
                        {
                            <tr>
                                <td><span class="fw-bold">@group.ElementAt(i).MetricWeight</span> lbs</td>
                                <td><span class="fw-bold">@group.ElementAt(i).Reps</span> reps</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
    <div class="d-flex flex-row align-items-center justify-content-center">
        <NavLink class="btn btn-primary" href="categories">+ Add New Exercise</NavLink>
    </div>
}
else
{
    <div class="d-flex flex-column align-items-center justify-content-center" style="min-height: 50vh;">
        <h1>Workout Log Empty</h1>
        <NavLink class="btn btn-primary mt-3" href="categories">+ Add New Exercise</NavLink>
    </div>
}

@code {
    private List<TrainingLogWithExerciseName> logs = new List<TrainingLogWithExerciseName>();

    protected override async Task OnInitializedAsync()
    {
        logs = await dataService.GetExercises();
    }

    private string DisplayDateText => dataService.SelectedDate.Date switch
    {
        var date when date == DateTime.Today => "Today",
        var date when date == DateTime.Today.AddDays(-1) => "Yesterday",
        var date when date == DateTime.Today.AddDays(1) => "Tomorrow",
        _ => dataService.SelectedDate.ToString("ddd, MMM dd"),
    };

    private async Task SetDateToToday()
    {
        dataService.SelectedDate = DateTime.Today;
        logs = await dataService.GetExercises();
    }

    private async Task GoToPreviousDay()
    {
        dataService.SelectedDate = dataService.SelectedDate.AddDays(-1);
        logs = await dataService.GetExercises();
    }

    private async Task GoToNextDay()
    {
        dataService.SelectedDate = dataService.SelectedDate.AddDays(1);
        logs = await dataService.GetExercises();
    }

    private void NavigateToExercise(int exerciseId)
    {
        NavigationManager.NavigateTo($"/traininglog/{exerciseId}");
    }
}