@page "/newlogentry/{ExerciseId:int}"
@using BFN.App.Services
@using BFN.Data.Models

@if (exercise == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h1>@exercise.Name</h1>
    <EditForm Model="@newLogEntry" OnValidSubmit="HandleValidSubmit">
        <div>
            <label for="metricWeight">Weight:</label>
            <InputNumber @bind-Value="newLogEntry.MetricWeight" id="metricWeight" class="form-control" />
        </div>
        <div>
            <label for="reps">Reps:</label>
            <InputNumber @bind-Value="newLogEntry.Reps" id="reps" class="form-control" />
        </div>
        <button type="submit" class="btn btn-primary">Save</button>
        <button type="button" @onclick="ClearForm" class="btn btn-secondary">Clear</button>
    </EditForm>

    <h2>Today's Logs</h2>
    @if (todaysLogs.Any())
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Weight</th>
                    <th>Reps</th>
                    <!-- Other columns as needed -->
                </tr>
            </thead>
            <tbody>
                @foreach (var log in todaysLogs)
                {
                    <tr>
                        <td>@log.Date.ToShortDateString()</td>
                        <td>@log.MetricWeight</td>
                        <td>@log.Reps</td>
                        <!-- Other fields as needed -->
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p>No logs for today.</p>
    }
}


@code {
    [Parameter]
    public int ExerciseId { get; set; }

    private Exercise exercise;
    private TrainingLog newLogEntry = new TrainingLog();
    private List<TrainingLog> todaysLogs = new List<TrainingLog>();

    protected override async Task OnInitializedAsync()
    {
        exercise = await DataService.db.GetAsync<Exercise>(ExerciseId);
        await DataService.FetchTodaysLogs(ExerciseId);
    }

    private async Task HandleValidSubmit()
    {
        newLogEntry.ExerciseId = ExerciseId;
        newLogEntry.Date = DateTime.Now;

        await DataService.db.InsertAsync(newLogEntry);

        newLogEntry = new TrainingLog();
        await DataService.FetchTodaysLogs(ExerciseId);
    }

    private void ClearForm()
    {
        newLogEntry = new TrainingLog();
        StateHasChanged();
    }
}
