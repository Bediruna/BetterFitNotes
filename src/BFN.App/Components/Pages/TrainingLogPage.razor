@page "/traininglog/{ExerciseId:int}"
@using BFN.App.Services
@using BFN.Data.Models
@inject DataService dataService

@if (exercise == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h1>@exercise.Name</h1>
    <EditForm Model="@trainingLog" OnValidSubmit="HandleValidSubmit">
        <div>
            <label for="metricWeight">Weight (lbs):</label>
            <div class="input-group mb-3">
                <button class="btn btn-outline-secondary" type="button" @onclick="DecrementWeight">-</button>
                <InputNumber @bind-Value="trainingLog.MetricWeight" id="metricWeight" class="form-control text-center" />
                <button class="btn btn-outline-secondary" type="button" @onclick="IncrementWeight">+</button>
            </div>
        </div>
        <div>
            <label for="reps">Reps:</label>
            <div class="input-group mb-3">
                <button class="btn btn-outline-secondary" type="button" @onclick="DecrementReps" disabled="@((trainingLog.Reps <= 1))">-</button>
                <InputNumber @bind-Value="trainingLog.Reps" id="reps" class="form-control text-center" />
                <button class="btn btn-outline-secondary" type="button" @onclick="IncrementReps">+</button>
            </div>
        </div>
        <button type="submit" class="btn @(isEditMode ? "btn-success" : "btn-primary")">@primaryButtonText</button>
        <button type="button" @onclick="ClearOrDelete" class="btn @(isEditMode ? "btn-danger" : "btn-secondary")">@secondaryButtonText</button>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger mt-3" role="alert">
                @errorMessage
            </div>
        }
    </EditForm>

    @if (logs.Any())
    {
        <table class="table">
            <tbody>
                @for (int i = 0; i < logs.Count; i++)
                {
                    var currentLog = logs[i];
                    <tr @onclick="() => SelectLog(currentLog)">
                        <td>@(i + 1)</td>
                        <td>@logs[i].MetricWeight lbs</td>
                        <td>@logs[i].Reps reps</td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {
    [Parameter]
    public int ExerciseId { get; set; }

    private Exercise exercise;
    private TrainingLog trainingLog = new TrainingLog();
    private List<TrainingLog> logs = new List<TrainingLog>();

    private string errorMessage;
    private string primaryButtonText = "Save";
    private string secondaryButtonText = "Clear";
    private bool isEditMode = false;

    protected override async Task OnInitializedAsync()
    {
        exercise = await dataService.db.GetAsync<Exercise>(ExerciseId);
        logs = await dataService.GetLogs(ExerciseId);
    }

    private void SelectLog(TrainingLog log)
    {
        trainingLog = log;
        isEditMode = true;
        primaryButtonText = "Update";
        secondaryButtonText = "Delete";
    }

    private async Task HandleValidSubmit()
    {
        if (trainingLog.Reps <= 0)
        {
            trainingLog.Reps = 1;
            errorMessage = "Reps must be greater than 0.";
            StateHasChanged();
            return;
        }
        else
        {
            errorMessage = "";
        }

        if (isEditMode)
        {
            await dataService.db.UpdateAsync(trainingLog);
            isEditMode = false;
            primaryButtonText = "Save";
            secondaryButtonText = "Clear";
        }
        else
        {
            trainingLog.ExerciseId = ExerciseId;
            trainingLog.Date = dataService.SelectedDate;
            await dataService.db.InsertAsync(trainingLog);
        }

        trainingLog = new TrainingLog
        {
            MetricWeight = trainingLog.MetricWeight,
            Reps = trainingLog.Reps,
        };
        logs = await dataService.GetLogs(ExerciseId);
    }

    private async Task ClearOrDelete()
    {
        if (isEditMode)
        {
            await dataService.db.DeleteAsync(trainingLog);
            logs = await dataService.GetLogs(ExerciseId);
            isEditMode = false;
            primaryButtonText = "Save";
            secondaryButtonText = "Clear";
        }

        trainingLog = new TrainingLog();
        StateHasChanged();
    }

    private void IncrementWeight()
    {
        int weightIncrement = 5;//might want to add this to appsettings
        trainingLog.MetricWeight += weightIncrement;
    }

    private void DecrementWeight()
    {
        int weightIncrement = 5;//might want to add this to appsettings
        if (trainingLog.MetricWeight > weightIncrement)
        {
            trainingLog.MetricWeight -= weightIncrement;
        }
    }

    private void IncrementReps()
    {
        trainingLog.Reps++;
    }

    private void DecrementReps()
    {
        if (trainingLog.Reps > 1)
        {
            trainingLog.Reps--;
        }
    }
}
